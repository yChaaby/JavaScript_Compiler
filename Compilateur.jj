PARSER_BEGIN(Compilateur)
import AST.*;
import java.io.InputStream;

public class Compilateur {
    public static void main(String args[]) {
        try {
            System.out.print("Tapez une Expression : ");
            Compilateur parseur = new Compilateur(System.in);
            ExpressionA ast = parseur.mainNT();
            System.out.println("AST calculé : \n" + ast.toAssembly()+"Halt");
            System.out.println("C'est bien une expression arithmétique !!");
        } catch (TokenMgrError e) {
                    System.out.println("Ceci n'est pas une expression arithm\u00e9tique :"+e);
                } catch (ParseException e){
                    System.out.println("Ceci n'est pas une expression arithm\u00e9tique :"+e);
    }           }
}
PARSER_END(Compilateur)

SKIP :
{ " " | "\t" }

TOKEN :
{ < NOMBRE: ["1"-"9"] (["0"-"9"])* >
| < FLOAT: (["0"-"9"])+ "." (["0"-"9"])+ >
| < BOOLEAN: "True" | "False">
| < EOL: "\n" >
}

ExpressionA mainNT () :
{
    ExpressionA expression;
}
{
    expression=expression() <EOL> { return expression; }
}
ExpressionA expression() :
{
    ExpressionA gauche, droite;
}
{
    gauche=comp() (
              "==" droite=comp()  { gauche = new Egal(gauche, droite); }
            | ">=" droite=comp() {  gauche = new GrEgNb(gauche, droite); }
            | ">"  droite=comp()  { gauche = new GrStNb(gauche, droite);}
            | "<"  droite=comp()  { gauche = new LoStNb(gauche, droite);}
            | "<=" droite=comp()  { gauche = new LoEqNb(gauche, droite); }
            | "!=" droite=comp()  { gauche = new NotEql(gauche, droite); }


    )*
    { return gauche; }
}

ExpressionA comp() :
{
    ExpressionA gauche, droite;
}
{
    gauche=terme() (
         "+" droite=terme() { gauche = new Plus(gauche, droite); }
        | "-" droite=terme() { gauche = new Moins(gauche, droite); }
         )*
    { return gauche; }
}
ExpressionA terme () :
{
    ExpressionA gauche, droite;
}
{
    gauche=facteur() (
          "*" droite=facteur() { gauche = new Mult(gauche, droite); }
        | "/" droite=facteur() { gauche = new Div(gauche, droite);}
        | "%" droite=facteur() { gauche = new Modulo(gauche, droite); }
    )*
    { return gauche; }
}

ExpressionA facteur() :
{
    ExpressionA expr;
}
{
      "(" expr=expression() ")" { return expr; }
    | "-" expr=facteur() { return new Neg(expr); }
    | "!" expr=facteur() { return new Not(expr); }// Construit un nœud not
    | <NOMBRE> { return new Num(Integer.parseInt(token.image));}
    | <FLOAT> { return new FloatT(Float.parseFloat(token.image));}
    | <BOOLEAN> { return new Bool(Boolean.parseBoolean(token.image));}// Construit un nœud Num
}
