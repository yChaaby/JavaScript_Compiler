/* Compilateur.java */
/* Generated By:JavaCC: Do not edit this line. Compilateur.java */
import AST.*;
import java.io.InputStream;

public class Compilateur implements CompilateurConstants {
    public static void main(String args[]) {
        try {
            System.out.print("Tapez une Expression : ");
            Compilateur parseur = new Compilateur(System.in);
            ExpressionA ast = parseur.mainNT();
            System.out.println("AST calcul\u00e9 : \n" + ast.toAssembly()+"Halt");
            System.out.println("C'est bien une expression arithm\u00e9tique !!");
        } catch (TokenMgrError e) {
                    System.out.println("Ceci n'est pas une expression arithm\u00e9tique :"+e);
                } catch (ParseException e){
                    System.out.println("Ceci n'est pas une expression arithm\u00e9tique :"+e);
    }           }

  static final public ExpressionA mainNT() throws ParseException {ExpressionA expression;
    expression = expression();
    jj_consume_token(EOL);
{if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionA expression() throws ParseException {ExpressionA gauche, droite;
    gauche = comp();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 7:{
        jj_consume_token(7);
        droite = comp();
gauche = new Egal(gauche, droite);
        break;
        }
      case 8:{
        jj_consume_token(8);
        droite = comp();
gauche = new GrEgNb(gauche, droite);
        break;
        }
      case 9:{
        jj_consume_token(9);
        droite = comp();
gauche = new GrStNb(gauche, droite);
        break;
        }
      case 10:{
        jj_consume_token(10);
        droite = comp();
gauche = new LoStNb(gauche, droite);
        break;
        }
      case 11:{
        jj_consume_token(11);
        droite = comp();
gauche = new LoEqNb(gauche, droite);
        break;
        }
      case 12:{
        jj_consume_token(12);
        droite = comp();
gauche = new NotEql(gauche, droite);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return gauche;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionA comp() throws ParseException {ExpressionA gauche, droite;
    gauche = terme();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 13:
      case 14:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 13:{
        jj_consume_token(13);
        droite = terme();
gauche = new Plus(gauche, droite);
        break;
        }
      case 14:{
        jj_consume_token(14);
        droite = terme();
gauche = new Moins(gauche, droite);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return gauche;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionA terme() throws ParseException {ExpressionA gauche, droite;
    gauche = facteur();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 15:
      case 16:
      case 17:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 15:{
        jj_consume_token(15);
        droite = facteur();
gauche = new Mult(gauche, droite);
        break;
        }
      case 16:{
        jj_consume_token(16);
        droite = facteur();
gauche = new Div(gauche, droite);
        break;
        }
      case 17:{
        jj_consume_token(17);
        droite = facteur();
gauche = new Modulo(gauche, droite);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return gauche;}
    throw new Error("Missing return statement in function");
}

  static final public ExpressionA facteur() throws ParseException {ExpressionA expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 18:{
      jj_consume_token(18);
      expr = expression();
      jj_consume_token(19);
{if ("" != null) return expr;}
      break;
      }
    case 14:{
      jj_consume_token(14);
      expr = facteur();
{if ("" != null) return new Neg(expr);}
      break;
      }
    case 20:{
      jj_consume_token(20);
      expr = facteur();
{if ("" != null) return new Not(expr);}
      break;
      }
    case NOMBRE:{
      jj_consume_token(NOMBRE);
{if ("" != null) return new Num(Integer.parseInt(token.image));}
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
{if ("" != null) return new FloatT(Float.parseFloat(token.image));}
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
{if ("" != null) return new Bool(Boolean.parseBoolean(token.image));}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompilateurTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1f80,0x1f80,0x6000,0x6000,0x38000,0x38000,0x144038,};
	}

  /** Constructor with InputStream. */
  public Compilateur(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilateur(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new CompilateurTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilateur(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CompilateurTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new CompilateurTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilateur(CompilateurTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompilateurTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[21];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 7; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 21; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
